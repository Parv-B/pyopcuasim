{"file":"p--2LOMK-5.js","mappings":";;AAAA;;;;;;;AAOG;AAuBH;;AAEG;AACa,SAAA,aAAa,CAC3B,IAAY,EACZ,YAAgB,EAAA;IAEhB,OAAO;QACL,IAAI;QACJ,YAAY;KACb;AACH;AAWA;;;;;;;;;AASG;AACG,MAAO,YAAuC,SAAQ,KAAK,CAAA;AAC/D,IAAA,WAAA,CACkB,OAAU,EACV,QAAyC,EACzC,SAAmB,EAAA;AAEnC,QAAA,KAAK,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAJ3C,IAAO,CAAA,OAAA,GAAP,OAAO;QACP,IAAQ,CAAA,QAAA,GAAR,QAAQ;QACR,IAAS,CAAA,SAAA,GAAT,SAAS;;AAI5B;AAgBK,SAAU,kBAAkB,CAIhC,WAAc,EACd,OAAU,EACV,iBAGS,EACT,SAAmB,EAAA;AAEnB,IAAA,IAAI,YAAsC;AAC1C,IAAA,WAAW,CAAC,aAAa,CACvB,IAAI,YAAY,CACd,OAAO,EACP,CAAC,GAAG,EAAE,KAAK,KAAI;AACb,QAAA,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC;QAC7B,YAAY,GAAG,KAAK;AACtB,KAAC,EACD,SAAS,CACV,CACF;IAED,OAAO;QACL,WAAW,EAAE,MAAK;YAChB,IAAI,YAAY,EAAE;AAChB,gBAAA,YAAY,EAAE;;SAEjB;KACF;AACH;SAKgB,kBAAkB,CAKhC,WAAc,EACd,OAAU,EACV,cAA+B,EAAA;AAE/B,IAAA,MAAM,cAAc,GAAG,IAAI,UAAU,EAAmB;AACxD,IAAA,MAAM,aAAa,GAAG,IAAI,UAAU,EAAkB;AAEtD,IAAA,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAgC;IAExD,WAAW,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,KAAY,KAAI;QAC/D,MAAM,mBAAmB,GAAG,KAAwB;AACpD,QAAA,IAAI,CAAA,mBAAmB,KAAnB,IAAA,IAAA,mBAAmB,uBAAnB,mBAAmB,CAAE,OAAO,CAAC,IAAI,MAAK,OAAO,CAAC,IAAI,EAAE;YACtD;;QAGF,mBAAmB,CAAC,eAAe,EAAE;AAErC,QAAA,IAAI,mBAAmB,CAAC,SAAS,EAAE;AACjC,YAAA,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC;;AAEnC,QAAA,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC;QAExC,IAAI,cAAc,EAAE;AAClB,YAAA,mBAAmB,CAAC,QAAQ,CAAC,cAAc,EAAE,MAAK;AAChD,gBAAA,QAAQ,CAAC,MAAM,CAAC,mBAAmB,CAAC;AACtC,aAAC,CAAC;;AAEN,KAAC,CAAC;AAEF,IAAA,aAAa,CAAC,EAAE,CAAC,CAAC,OAAuB,KAAI;AAC3C,QAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KACjB,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAK;AACvB,YAAA,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;SACnB,CAAC,CACH;AACH,KAAC,CAAC;IAEF,OAAO;AACL,QAAA,IAAI,EAAE,CAAC,OAAuB,KAAI;AAChC,YAAA,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;SAC5B;KACF;AACH;;ACzKA;;;;;;;AAOG;AAKU,MAAA,aAAa,GAAG,CAAC,OAAgB,KAAI;IAChD,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC;AAC9C,IAAA,OAAO,WAAW;AACpB;AAoBa,MAAA,wBAAwB,GAAG,aAAa,CAKlD,4BAA4B,EAAE;AAC/B,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,IAAI,EAAE,IAAI;AACV,IAAA,OAAO,EAAE,KAAK;AACf,CAAA;;;;","names":[],"sources":["src/components/utils/context.ts","src/components/utils/application-layout/context.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { TypedEvent } from './typed-event';\n\n/**\n * A Context object defines an optional initial value for a Context, as well as a name identifier for debugging purposes.\n */\nexport type Context<T> = {\n  name: string;\n  initialValue?: T;\n};\n\n/**\n * An unknown context type\n */\nexport type UnknownContext = Context<unknown>;\n\n/**\n * A helper type which can extract a Context value type from a Context type\n */\nexport type ContextType<T extends UnknownContext> =\n  T extends Context<infer Y> ? Y : never;\n\n/**\n * A function which creates a Context value object\n */\nexport function createContext<T>(\n  name: string,\n  initialValue?: T\n): Readonly<Context<T>> {\n  return {\n    name,\n    initialValue,\n  };\n}\n\n/**\n * A callback which is provided by a context requester and is called with the value satisfying the request.\n * This callback can be called multiple times by context providers as the requested value is changed.\n */\nexport type ContextCallback<ValueType> = (\n  value: ValueType,\n  unsubscribe?: () => void\n) => void;\n\n/**\n * An event fired by a context requester to signal it desires a named context.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`\n * function to the callback which requesters can invoke to indicate they no longer wish to receive these updates.\n */\nexport class ContextEvent<T extends UnknownContext> extends Event {\n  public constructor(\n    public readonly context: T,\n    public readonly callback: ContextCallback<ContextType<T>>,\n    public readonly subscribe?: boolean\n  ) {\n    super('context-request', { bubbles: true, composed: true });\n  }\n}\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-request' event can be emitted by any element which desires\n     * a context value to be injected by an external provider.\n     */\n    'context-request': ContextEvent<UnknownContext>;\n  }\n}\n\nexport type ContextConsumerSubscription = {\n  unsubscribe: () => void;\n};\n\nexport function useContextConsumer<\n  T extends HTMLElement,\n  C extends UnknownContext,\n>(\n  hostElement: T,\n  context: C,\n  onContextReceived: (\n    context: ContextType<C>,\n    unsubscribe?: () => void\n  ) => void,\n  subscribe?: boolean\n): ContextConsumerSubscription {\n  let _unsubscribe: (() => void) | undefined;\n  hostElement.dispatchEvent(\n    new ContextEvent(\n      context,\n      (ctx, unSub) => {\n        onContextReceived(ctx, unSub);\n        _unsubscribe = unSub;\n      },\n      subscribe\n    )\n  );\n\n  return {\n    unsubscribe: () => {\n      if (_unsubscribe) {\n        _unsubscribe();\n      }\n    },\n  };\n}\nexport type ContextProvider<C extends Context<{}> = Context<any>> = {\n  emit: (context: ContextType<C>) => void;\n};\n\nexport function useContextProvider<\n  X extends {},\n  C extends Context<X>,\n  T extends HTMLElement = HTMLElement,\n>(\n  hostElement: T,\n  context: C,\n  contextPayload?: ContextType<C>\n): ContextProvider<C> {\n  const requestContext = new TypedEvent<ContextEvent<C>>();\n  const updateContext = new TypedEvent<ContextType<C>>();\n\n  const requests = new Set<ContextEvent<UnknownContext>>();\n\n  hostElement.addEventListener('context-request', (event: Event) => {\n    const requestContextEvent = event as ContextEvent<C>;\n    if (requestContextEvent?.context.name !== context.name) {\n      return;\n    }\n\n    requestContextEvent.stopPropagation();\n\n    if (requestContextEvent.subscribe) {\n      requests.add(requestContextEvent);\n    }\n    requestContext.emit(requestContextEvent);\n\n    if (contextPayload) {\n      requestContextEvent.callback(contextPayload, () => {\n        requests.delete(requestContextEvent);\n      });\n    }\n  });\n\n  updateContext.on((context: ContextType<C>) => {\n    requests.forEach((r) =>\n      r.callback(context, () => {\n        requests.delete(r);\n      })\n    );\n  });\n\n  return {\n    emit: (context: ContextType<C>) => {\n      updateContext.emit(context);\n    },\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { createContext } from '../context';\nimport { type LiteralStringUnion } from '../type-helper';\n\nexport const closestIxMenu = (element: Element) => {\n  const menuElement = element.closest('ix-menu');\n  return menuElement;\n};\n\nexport type AppSwitchConfigurationTarget = LiteralStringUnion<\n  '_self' | '_blank' | '_parent' | '_top'\n>;\n\nexport type AppSwitchConfiguration = {\n  currentAppId: string;\n  apps: {\n    id: string;\n    name: string;\n    description: string;\n    url: string;\n    target: AppSwitchConfigurationTarget;\n    iconSrc: string;\n  }[];\n  i18nAppSwitch?: string;\n  i18nLoadingApps?: string;\n};\n\nexport const ApplicationLayoutContext = createContext<{\n  hideHeader: boolean;\n  host: 'basic-navigation' | 'map-navigation' | null;\n  appSwitchConfig?: AppSwitchConfiguration;\n  sidebar?: boolean;\n}>('application-layout-context', {\n  hideHeader: false,\n  host: null,\n  sidebar: false,\n});\n"],"version":3}