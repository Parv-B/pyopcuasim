{"file":"p-Dp4RJcgZ.js","mappings":"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","names":[],"sources":["src/components/utils/theme-switcher.ts"],"sourcesContent":["import { type LiteralStringUnion } from './type-helper';\nimport { TypedEvent } from './typed-event';\n\nexport type ThemeVariant = 'light' | 'dark';\n\nclass ThemeSwitcher {\n  readonly prefixTheme = 'theme-';\n  readonly suffixLight = '-light';\n  readonly suffixDark = '-dark';\n  readonly defaultTheme = 'theme-classic-dark';\n\n  mutationObserver?: MutationObserver;\n  _themeChanged = new TypedEvent<string>();\n\n  public get themeChanged() {\n    return this._themeChanged;\n  }\n\n  public hasVariantSuffix(className: string) {\n    return (\n      className.endsWith(this.suffixDark) ||\n      className.endsWith(this.suffixLight)\n    );\n  }\n\n  private isThemeClass(className: string) {\n    return (\n      className.startsWith(this.prefixTheme) && this.hasVariantSuffix(className)\n    );\n  }\n\n  public setTheme(themeName: string, systemAppearance = false) {\n    if (!this.isThemeClass(themeName) && systemAppearance === false) {\n      throw Error(\n        `Provided theme name ${themeName} does not match our naming conventions. (theme-<name>-(dark,light))`\n      );\n    }\n\n    if (systemAppearance) {\n      const currentSystemAppearance = getCurrentSystemAppearance();\n      this.replaceBodyThemeClass(themeName);\n      this.setVariant(currentSystemAppearance);\n      return;\n    }\n\n    this.replaceBodyThemeClass(themeName);\n  }\n\n  private replaceBodyThemeClass(themeName: string) {\n    const oldThemes: string[] = [];\n    document.body.classList.forEach((className) => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n\n    document.body.classList.remove(...oldThemes);\n    document.body.classList.add(themeName);\n  }\n\n  public toggleMode() {\n    const oldThemes: string[] = [];\n\n    document.body.classList.forEach((className) => {\n      if (this.isThemeClass(className)) {\n        oldThemes.push(className);\n      }\n    });\n\n    if (oldThemes.length === 0) {\n      document.body.classList.add(this.getOppositeMode(this.defaultTheme));\n      return;\n    }\n\n    oldThemes.forEach((themeName) => {\n      document.body.classList.replace(\n        themeName,\n        this.getOppositeMode(themeName)\n      );\n    });\n  }\n\n  public getCurrentTheme() {\n    return (\n      Array.from(document.body.classList).find((className) =>\n        this.isThemeClass(className)\n      ) ??\n      `theme-${window\n        .getComputedStyle(document.body)\n        .getPropertyValue('--ix-theme-name')}`\n    );\n  }\n\n  public setVariant(variant: ThemeVariant = getCurrentSystemAppearance()) {\n    const currentTheme = this.getCurrentTheme();\n    document.body.classList.remove(currentTheme);\n\n    if (currentTheme.endsWith(this.suffixDark)) {\n      document.body.classList.add(\n        currentTheme.replace(/-dark$/g, `-${variant}`)\n      );\n    }\n\n    if (currentTheme.endsWith(this.suffixLight)) {\n      document.body.classList.add(\n        currentTheme.replace(/-light$/g, `-${variant}`)\n      );\n    }\n  }\n\n  private getOppositeMode(themeName: string) {\n    if (themeName.endsWith(this.suffixDark)) {\n      return themeName.replace(/-dark$/g, this.suffixLight);\n    }\n\n    if (themeName.endsWith(this.suffixLight)) {\n      return themeName.replace(/-light$/g, this.suffixDark);\n    }\n\n    return '';\n  }\n\n  private handleMutations(mutations: MutationRecord[]) {\n    return mutations.forEach((mutation) => {\n      const { target } = mutation;\n      (target as HTMLElement).classList.forEach((className) => {\n        if (\n          this.isThemeClass(className) &&\n          !mutation.oldValue?.includes(className)\n        ) {\n          this._themeChanged.emit(className);\n        }\n      });\n    });\n  }\n\n  private registerMutationObserver() {\n    if (typeof (window as any) === 'undefined') {\n      return;\n    }\n\n    if (!('MutationObserver' in window)) {\n      console.warn(\n        'ThemeSwitcher not supported by your browser. Missing MutationObserver API'\n      );\n      return;\n    }\n\n    this.mutationObserver = new MutationObserver((mutations) => {\n      this.handleMutations(mutations);\n    });\n\n    this.mutationObserver.observe(document.body, {\n      attributeFilter: ['class'],\n      attributeOldValue: true,\n    });\n  }\n\n  public constructor() {\n    this.registerMutationObserver();\n  }\n}\n\nexport type IxTheme = LiteralStringUnion<\n  'classic' | 'classic-dark' | 'classic-light'\n>;\n\nexport const getCurrentSystemAppearance = (): ThemeVariant => {\n  const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');\n\n  if (matchMedia.matches) {\n    return 'dark';\n  }\n\n  return 'light';\n};\n\nexport const themeSwitcher = new ThemeSwitcher();\n"],"version":3}