{"file":"p-D_ThwWq-.js","mappings":"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","names":[],"sources":["src/components/utils/listener.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2024 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { getElement } from '@stencil/core';\nimport { HTMLStencilElement } from '@stencil/core/internal';\n\nexport type ListenerOptions = {\n  target?: 'window';\n  defaultEnabled?: boolean;\n};\n\ntype HostListener = {\n  on: (onEventCallback: any) => void;\n  isEnabled: boolean | undefined;\n  enable: (state: boolean) => void;\n  destroy: () => void;\n};\n\nconst defaultOptions: ListenerOptions = {\n  target: 'window',\n  defaultEnabled: true,\n};\n\nexport function createListener(\n  event: string,\n  options: ListenerOptions = {}\n): HostListener {\n  const opts = {\n    ...defaultOptions,\n    ...options,\n  };\n\n  let callback: any;\n  const onEvent = (event: Event) => {\n    callback(event);\n  };\n\n  const resultObject = {\n    on: (onEventCallback: any) => {\n      callback = onEventCallback;\n    },\n\n    isEnabled: opts.defaultEnabled,\n\n    enable: (state: boolean) => {\n      resultObject.isEnabled = state;\n\n      if (state) {\n        addEventListener(event, onEvent);\n      } else {\n        removeEventListener(event, onEvent);\n      }\n    },\n\n    destroy: () => {\n      resultObject.enable(false);\n    },\n  };\n\n  resultObject.enable(!!opts.defaultEnabled);\n  return resultObject;\n}\n\ntype HTMLStencilElementWithListener = HTMLStencilElement & {\n  [K in `__ix__${string}`]?: HostListener | null;\n};\n\nexport function OnListener<T>(event: string, fnExp?: (self: T) => boolean) {\n  return (proto: any, methodName: string) => {\n    const { componentWillLoad, componentWillRender, disconnectedCallback } =\n      proto;\n\n    if (fnExp) {\n      proto.componentWillRender = function () {\n        const host = getElement(this) as HTMLStencilElementWithListener;\n        host[`__ix__${methodName}`]?.enable(fnExp(this));\n        return componentWillRender && componentWillRender.call(this);\n      };\n    }\n\n    proto.componentWillLoad = function () {\n      const listener = createListener(event);\n      const host = getElement(this) as HTMLStencilElementWithListener;\n      const method = this[methodName];\n\n      host[`__ix__${methodName}`] = listener;\n\n      listener.on(method.bind(this));\n      return componentWillLoad && componentWillLoad.call(this);\n    };\n\n    proto.disconnectedCallback = function () {\n      const host = getElement(this) as HTMLStencilElementWithListener;\n\n      if (host && host[`__ix__${methodName}`]) {\n        host[`__ix__${methodName}`]?.destroy();\n        host[`__ix__${methodName}`] = null;\n      }\n\n      return disconnectedCallback && disconnectedCallback.call(this);\n    };\n  };\n}\n"],"version":3}