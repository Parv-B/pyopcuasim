{"file":"p-BdCnOrqW.js","mappings":"AAAA;;;;;;;AAOG;MAUU,UAAU,CAAA;AAAvB,IAAA,WAAA,GAAA;QACkB,IAAS,CAAA,SAAA,GAAkB,EAAE;QACtC,IAAc,CAAA,cAAA,GAAkB,EAAE;AAEzC,QAAA,IAAA,CAAA,EAAE,GAAG,CAAC,QAAqB,KAAgB;AACzC,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC7B,OAAO;gBACL,OAAO,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;aAClC;AACH,SAAC;AAED,QAAA,IAAA,CAAA,IAAI,GAAG,CAAC,QAAqB,KAAU;AACrC,YAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;AACpC,SAAC;AAED,QAAA,IAAA,CAAA,GAAG,GAAG,CAAC,QAAqB,KAAI;YAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;AACtD,YAAA,IAAI,aAAa,GAAG,EAAE,EAAE;gBACtB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;;AAE3C,SAAC;AAED,QAAA,IAAA,CAAA,IAAI,GAAG,CAAC,KAAQ,KAAI;;AAElB,YAAA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC;;YAGrD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAClC,gBAAA,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc;AAClC,gBAAA,IAAI,CAAC,cAAc,GAAG,EAAE;AACxB,gBAAA,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC;;AAEjD,SAAC;AAED,QAAA,IAAA,CAAA,IAAI,GAAG,CAAC,EAAiB,KAAgB;AACvC,YAAA,OAAO,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnC,SAAC;;AACF;;;;","names":[],"sources":["src/components/utils/typed-event.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport interface Listener<T> {\n  (event: T): any;\n}\n\nexport interface Disposable {\n  dispose(): void;\n}\n\nexport class TypedEvent<T> {\n  public readonly listeners: Listener<T>[] = [];\n  public listenersOncer: Listener<T>[] = [];\n\n  on = (listener: Listener<T>): Disposable => {\n    this.listeners.push(listener);\n    return {\n      dispose: () => this.off(listener),\n    };\n  };\n\n  once = (listener: Listener<T>): void => {\n    this.listenersOncer.push(listener);\n  };\n\n  off = (listener: Listener<T>) => {\n    const callbackIndex = this.listeners.indexOf(listener);\n    if (callbackIndex > -1) {\n      this.listeners.splice(callbackIndex, 1);\n    }\n  };\n\n  emit = (event: T) => {\n    /** Update any general listeners */\n    this.listeners.forEach((listener) => listener(event));\n\n    /** Clear the `once` queue */\n    if (this.listenersOncer.length > 0) {\n      const toCall = this.listenersOncer;\n      this.listenersOncer = [];\n      toCall.forEach((listener) => listener(event));\n    }\n  };\n\n  pipe = (te: TypedEvent<T>): Disposable => {\n    return this.on((e) => te.emit(e));\n  };\n}\n"],"version":3}