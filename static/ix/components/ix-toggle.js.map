{"file":"ix-toggle.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/toggle/toggle.scss?tag=ix-toggle&encapsulation=shadow","src/components/toggle/toggle.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'mixins/hover';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n  display: inline-flex;\n  flex-direction: row;\n  position: relative;\n  height: 1.5rem;\n  margin-block-start: 0.25rem;\n  margin-block-end: 0.25rem;\n\n  input[type='checkbox'] {\n    display: none;\n  }\n\n  .wrapper {\n    display: flex;\n    align-items: flex-start;\n    width: 100%;\n    height: 100%;\n  }\n\n  .label {\n    display: inline-block;\n    white-space: normal;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    margin-block-start: 0.125rem;\n    margin-inline-start: 0.5rem;\n  }\n\n  .switch {\n    all: unset;\n    position: relative;\n    display: inline-block;\n    width: 3rem;\n    min-width: 3rem;\n    max-width: 3rem;\n    height: 1.5rem;\n  }\n\n  .slider {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--theme-switch-off--background);\n    transition: var(--theme-default-time);\n    border-radius: 1.5rem;\n    border: 0.0625rem solid transparent;\n  }\n\n  .slider:before {\n    position: absolute;\n    content: '';\n    height: 1.125rem;\n    width: 1.125rem;\n    left: 0.125rem;\n    bottom: 0.125rem;\n    background-color: var(--theme-switch-thumb-off--background);\n    transition: var(--theme-default-time);\n    border-radius: 50%;\n  }\n\n  .switch.checked > .slider::before {\n    background-color: var(--theme-switch-thumb-on--background);\n    transform: translateX(1.5rem);\n  }\n\n  .switch > .slider {\n    border-color: var(--theme-switch-off--border-color);\n  }\n\n  .switch:hover > .slider {\n    background-color: var(--theme-switch-off--background--hover);\n    border-color: var(--theme-switch-off--border-color--hover);\n  }\n\n  .switch:hover > .slider:before {\n    background-color: var(--theme-switch-thumb-off--background--hover);\n  }\n\n  .switch:active > .slider {\n    background-color: var(--theme-switch-off--background--active);\n    border-color: var(--theme-switch-off--border-color--active);\n  }\n\n  .switch:active > .slider:before {\n    background-color: var(--theme-switch-thumb-off--background--active);\n  }\n\n  .switch.checked > .slider {\n    background-color: var(--theme-switch-on--background);\n    border-color: var(--theme-switch-on--border-color);\n  }\n\n  .switch.checked:hover > .slider {\n    background-color: var(--theme-switch-on--background--hover);\n    border-color: var(--theme-switch-on--border-color--hover);\n  }\n\n  .switch.checked:hover > .slider:before {\n    background-color: var(--theme-switch-thumb-on--background--hover);\n  }\n\n  .switch.checked:active > .slider {\n    background-color: var(--theme-switch-on--background--active);\n    border-color: var(--theme-switch-on--border-color--active);\n  }\n\n  .switch.checked:active > .slider:before {\n    background-color: var(--theme-switch-thumb-on--background--active);\n  }\n\n  .switch.indeterminate > .slider::before {\n    transform: translateX(0.75rem);\n  }\n}\n\n:host(:not(.disabled)) {\n  .wrapper {\n    cursor: pointer;\n  }\n\n  .switch:focus-visible > .slider {\n    outline: 0.0625rem solid var(--theme-color-focus-bdr);\n    outline-offset: 0.0625rem;\n  }\n}\n\n:host(.disabled) {\n  pointer-events: none;\n\n  .switch {\n    opacity: 0.5;\n  }\n\n  .switch > .slider {\n    background-color: var(--theme-switch-off--background--disabled);\n  }\n\n  .switch > .slider:before {\n    background-color: var(--theme-switch-thumb-off--background--disabled);\n  }\n\n  .switch.checked > .slider {\n    background-color: var(--theme-switch-on--background--disabled);\n  }\n\n  .switch.checked > .slider:before {\n    background-color: var(--theme-switch-thumb-on--background--disabled);\n  }\n\n  .label {\n    color: var(--theme-color-weak-text);\n  }\n}\n\n@mixin toggle-variant($selector) {\n  :host(#{$selector}:not(.disabled)) {\n    .slider {\n      @content;\n    }\n  }\n}\n\n@mixin define-toggle-vars($state, $type) {\n  --theme-switch-#{$state}--background: var(\n    --theme-switch-#{$state}--background--#{$type}\n  );\n  --theme-switch-#{$state}--background--hover: var(\n    --theme-switch-#{$state}--background--#{$type}--hover\n  );\n  --theme-switch-#{$state}--background--active: var(\n    --theme-switch-#{$state}--background--#{$type}--active\n  );\n\n  --theme-switch-thumb-#{$state}--background: var(\n    --theme-switch-thumb-#{$state}--background--#{$type}\n  );\n  --theme-switch-thumb-#{$state}--background--hover: var(\n    --theme-switch-thumb-#{$state}--background--#{$type}--hover\n  );\n  --theme-switch-thumb-#{$state}--background--active: var(\n    --theme-switch-thumb-#{$state}--background--#{$type}--active\n  );\n\n  --theme-switch-#{$state}--border-color: var(\n    --theme-switch-#{$state}--border-color--#{$type}\n  );\n  --theme-switch-#{$state}--border-color--hover: var(\n    --theme-switch-#{$state}--border-color--#{$type}--hover\n  );\n  --theme-switch-#{$state}--border-color--active: var(\n    --theme-switch-#{$state}--border-color--#{$type}--active\n  );\n}\n\n@include toggle-variant($selector: '.ix-info') {\n  @include define-toggle-vars('off', 'info');\n  @include define-toggle-vars('on', 'info');\n  @include define-toggle-vars('mixed', 'info');\n}\n\n@include toggle-variant($selector: '.ix-warning') {\n  @include define-toggle-vars('off', 'warning');\n  @include define-toggle-vars('on', 'warning');\n  @include define-toggle-vars('mixed', 'warning');\n}\n\n@include toggle-variant($selector: '.ix-invalid--required') {\n  @include define-toggle-vars('off', 'invalid');\n  @include define-toggle-vars('on', 'invalid');\n  @include define-toggle-vars('mixed', 'invalid');\n}\n\n@include toggle-variant($selector: '.ix-invalid') {\n  @include define-toggle-vars('off', 'invalid');\n  @include define-toggle-vars('on', 'invalid');\n  @include define-toggle-vars('mixed', 'invalid');\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  AttachInternals,\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  Watch,\n} from '@stencil/core';\nimport { a11yBoolean } from '../utils/a11y';\nimport { IxFormComponent, HookValidationLifecycle } from '../utils/input';\n\n/**\n * @form-ready\n */\n@Component({\n  tag: 'ix-toggle',\n  styleUrl: 'toggle.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class Toggle implements IxFormComponent<string> {\n  @AttachInternals() formInternals!: ElementInternals;\n\n  @Element() hostElement!: HTMLIxToggleElement;\n\n  /**\n   * Name of the checkbox component\n   */\n  @Prop({ reflect: true }) name?: string;\n\n  /**\n   * Value of the checkbox component\n   */\n  @Prop({ reflect: true }) value: string = 'on';\n\n  /**\n   * Whether the slide-toggle element is checked or not.\n   */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /**\n   * Whether the slide-toggle element is disabled or not.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * If true the control is in indeterminate state\n   */\n  @Prop({ mutable: true, reflect: true }) indeterminate = false;\n\n  /**\n   * Text for on state\n   */\n  @Prop() textOn = 'On';\n\n  /**\n   * Text for off state\n   */\n  @Prop() textOff = 'Off';\n\n  /**\n   * Text for indeterminate state\n   */\n  @Prop() textIndeterminate = 'Mixed';\n\n  /**\n   * Hide `on` and `off` text\n   */\n  @Prop() hideText = false;\n\n  /**\n   * Required state of the checkbox component.\n   *\n   * If true, checkbox needs to be checked to be valid\n   */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * An event will be dispatched each time the slide-toggle changes its value.\n   */\n  @Event() checkedChange!: EventEmitter<boolean>;\n\n  /** @internal */\n  @Event() valueChange!: EventEmitter<string>;\n\n  /**\n   * An event will be dispatched each time the toggle is blurred.\n   */\n  @Event() ixBlur!: EventEmitter<void>;\n\n  private touched = false;\n\n  onCheckedChange(newChecked: boolean) {\n    if (this.disabled) {\n      return;\n    }\n\n    const wasIndeterminate = this.indeterminate;\n    const oldChecked = this.checked;\n\n    if (this.indeterminate) {\n      this.indeterminate = false;\n    }\n\n    this.checked = newChecked;\n\n    const { defaultPrevented } = this.checkedChange.emit(this.checked);\n\n    if (defaultPrevented) {\n      this.indeterminate = wasIndeterminate;\n      this.checked = oldChecked;\n    }\n  }\n\n  componentWillLoad() {\n    this.updateFormInternalValue();\n  }\n\n  updateFormInternalValue(): void {\n    if (this.checked) {\n      this.formInternals.setFormValue(this.value);\n    } else {\n      this.formInternals.setFormValue(null);\n    }\n  }\n\n  @Watch('checked')\n  watchCheckedChange() {\n    this.touched = true;\n    this.updateFormInternalValue();\n  }\n\n  /** @internal */\n  @Method()\n  hasValidValue(): Promise<boolean> {\n    return Promise.resolve(this.checked);\n  }\n\n  /** @internal */\n  @Method()\n  getAssociatedFormElement(): Promise<HTMLFormElement | null> {\n    return Promise.resolve(this.formInternals.form);\n  }\n\n  /** @internal */\n  @Method()\n  isTouched(): Promise<boolean> {\n    return Promise.resolve(this.touched);\n  }\n\n  @HookValidationLifecycle()\n  updateClassMappings() {\n    /** This function is intentionally empty */\n  }\n\n  render() {\n    let toggleText = this.textOff;\n\n    if (this.checked) {\n      toggleText = this.textOn;\n    }\n\n    if (this.indeterminate) {\n      toggleText = this.textIndeterminate;\n    }\n    return (\n      <Host\n        class={{\n          disabled: this.disabled,\n        }}\n        onBlur={() => this.ixBlur.emit()}\n        onFocus={() => (this.touched = true)}\n      >\n        <label class=\"wrapper\">\n          <button\n            role=\"switch\"\n            aria-checked={a11yBoolean(this.checked)}\n            class={{\n              switch: true,\n              checked: this.checked,\n              indeterminate: this.indeterminate,\n            }}\n            onClick={() => this.onCheckedChange(!this.checked)}\n          >\n            <div class=\"slider\"></div>\n          </button>\n          <input\n            type=\"checkbox\"\n            disabled={this.disabled}\n            indeterminate={this.indeterminate}\n            checked={this.checked}\n            tabindex={0}\n            aria-hidden={a11yBoolean(true)}\n            aria-checked={a11yBoolean(this.checked)}\n            onChange={(event) =>\n              this.onCheckedChange((event.target as HTMLInputElement).checked)\n            }\n          />\n          {!this.hideText && (\n            <ix-typography class=\"label\">{toggleText}</ix-typography>\n          )}\n        </label>\n      </Host>\n    );\n  }\n}\n"],"version":3}